
@namespace GeneralGame.UI
@attribute [StyleSheet]
@inherits PanelComponent

@if (IsProxy)
    return;

<root>


    <div class="center">
        <div class="crosshair"></div>
    </div>


    <OffsetPanel/>

</root>

@code {

    [Property] public SkinnedModelRenderer ViewModel { get; set; }
    [Property] public CameraComponent Camera { get; set; }
    [Property] public AngPos CurPos { get; set; }
    [Property] public float CurFov { get; set; }

    [Property] public float ReloadAnimTime { get; set; }
    [Property] public float EmptyReloadAnimTime { get; set; }
    [Property] public float HolsterTime { get; set; }
    [Property] public float DeployTime { get; set; }
    [Property] public float BoltBackTime { get; set; }
    [Property] public float ShellInsertTime { get; set; }

    [Property] public bool IsAiming { get; set; } = true;
    [Property] public bool BoltBack { get; set; } = false;
    [Property] public bool ShellReload { get; set; } = false;

    private bool isEmpty { get; set; } = false;
    private TimeSince lastAnim { get; set; }

    public static GunEditor Instance { get; private set; }

    public GunEditor()
    {
        Instance = this;


    }

    protected override void OnStart()
    {
        base.OnStart();

        ViewModel.OnGenericEvent = (a) =>
        {
            string t = a.Type;

            switch (t)
            {
                case "reload_end":


                    if (!isEmpty) {

                        ReloadAnimTime = lastAnim;
                        lastAnim = 0;
                        isEmpty = true;
                        ViewModel.Set("reload", true);

                    }else {

                        EmptyReloadAnimTime = lastAnim;
                        lastAnim = 0;
                        isEmpty = false;
                        ViewModel.Set("deploy", true);
                    }


                    break;

                case "deployed":

                    DeployTime = lastAnim;
                    lastAnim = 0;
                    ViewModel.Set("holster", true);

                    break;

                case "holstered":

                    HolsterTime = lastAnim;
                    lastAnim = 0;

                    if (BoltBack) {
                        ViewModel.Set("boltback", true); 
                    }

                    break;

                case "pump_end":

					BoltBackTime = lastAnim;
                    lastAnim = 0;

					break;

            }

        };

    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        ViewModel.Set( "empty", isEmpty );
        ViewModel.Set( "aiming", IsAiming );

        ViewModel.WorldPosition = CurPos.Pos;
        ViewModel.WorldRotation = CurPos.Angle + new Angles(0, 90, 0);//rotation issues idk 

        Camera.FieldOfView = CurFov;
    }

    public void AnaliseAnimationsSpeed() {

        isEmpty = false;
        lastAnim = 0;
        ViewModel.Set("reload", true);
       
    }


    protected override int BuildHash()
    {
        return HashCode.Combine(DateTime.Now.ToString());
    }
     
   

  
}
