@using GeneralGame
@namespace GeneralGame.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	
    <image src="ui/hud/itnteract_hand.png" class="icon" />


	<div class="content">
		<text class="title">@DisplayName</text>

       
		<div class="interactions">
			@foreach(var interaction in _interactions)
			{

				if (interaction is null || !WithinBounds(interaction) || !IsAccessible(interaction) )
					continue;

                var coolDown = !interaction.Cooldown || interaction.CooldownTimer;
                var canInteract = !interaction.Disabled.InvokeOrDefault() && coolDown;

				if ( canInteract || interaction.ShowWhenDisabled() )
				{
                    var isActive = HasPriority(interaction.Keybind) && canInteract;
					<div class="interaction">
						<div>
							<inputhint class="hint" input=@interaction.Keybind DarkMode=@(!isActive) />
							<text class="description" style="color: @(isActive ? @interaction.Color.Hex : "#883232")">@interaction.Text</text>
						</div>

						@if( interaction.Cooldown && !interaction.CooldownTimer )
						{
							<img class="circle" src="ui/hud/circle/circle_@(TimerIndex(interaction)).png" />
						}
					</div>
				}
			}
		</div>
	</div>
</root>

@code {
  
    private string DisplayName => _targetObject?.Components?.Get<ItemComponent>()?.Name ?? _targetObject?.Name;
    private GameObject _targetObject => PlayerObject.Local?.TargetedGameObject;

    private static Dictionary<string, Interaction> priorityList = new();
    private IEnumerable<Interaction> _interactions => _targetObject?.GetInteractions() ?? new List<Interaction>();
    private bool WithinBounds(Interaction interaction) => !interaction.HasBounds || GetInteractionBounds(interaction).Contains(PlayerObject.Local.InteractionTrace.EndPosition);
    private bool HasPriority( string key ) => !priorityList.ContainsKey( key.ToLower() );
    private BBox GetInteractionBounds(Interaction interaction)
        => new BBox(interaction.Position - interaction.Extents / 2f, interaction.Position + interaction.Extents / 2f)
            .Transform(PlayerObject.Local.TargetedGameObject.Transform.World);

    private int TimerIndex( Interaction interaction )
        => (int)(MathX.Remap( interaction.CooldownTimer.Passed, 0, interaction.CooldownTime, 8, 0 ) + 0.5f);

    private void AddToPriority( Interaction interaction, bool forced = false )
    {
        if ( !forced ) 
            return;

        var key = interaction.Keybind.ToLower();
        var contains = priorityList.ContainsKey( key );
        if ( contains ) 
            return;

        priorityList.Add( key, interaction );
    }

    public override void Tick() 
    {	
  
       
        SetClass( "visible", ShowHint() );
		if (!HasClass("visible"))
			return;
       
        var pos = (PlayerObject.Local.InteractionBounds == null ? PlayerObject.Local.TargetedGameObject.Transform.Position : PlayerObject.Local.TargetedGameObject.Transform.World.PointToWorld(PlayerObject.Local.InteractionBounds.Value.Center));

        foreach ( var interaction in _interactions )
		{
			if ( interaction is null || !WithinBounds(interaction) || !IsAccessible(interaction) )
				continue;

			var canInteract = !interaction.Disabled.InvokeOrDefault();
			if ( canInteract )
				AddToPriority( interaction );

			if ( !HasPriority( interaction.Keybind ) )
				continue;

			if ( interaction.HasBounds )
                pos = PlayerObject.Local.TargetedGameObject.Transform.Position + interaction.Position * PlayerObject.Local.TargetedGameObject.Transform.Rotation;

            var coolDown = !interaction.Cooldown || interaction.CooldownTimer;

            if (canInteract && interaction.InputFunction(interaction.Keybind) && coolDown)
            {
				_targetObject?.Network.TakeOwnership();
                interaction.Action?.Invoke(PlayerObject.Local, _targetObject);

                interaction.CooldownTimer = interaction.CooldownTime;

				
				if (!_targetObject.IsValid())
					return;

				if (interaction.InputMode != InputMode.Down)
					Input.Clear(interaction.Keybind);


                var vector = (pos - PlayerObject.Local.Transform.Position) * PlayerObject.Local.Transform.Rotation.Inverse;
                PlayerObject.Local.BroadcastInteraction(
                    vector, 
					Rotation.LookAt( vector.Normal ), 
					interaction.Animation, 
					_targetObject.Id, 
					interaction.Sound?.InvokeOrDefault()?.ResourceId ?? -1,
					interaction.PlaySoundFromPlayer
				);
			}
		}

		pos = Scene.Camera.PointToScreenPixels( pos );
		pos *= ScaleFromScreen;

		Style.Position = PositionMode.Absolute;
		Style.Left = Length.Pixels( pos.x );
        Style.Top = Length.Pixels( pos.y );
        
        StateHasChanged();
	}

	private bool ShowHint()
	{
		if (!_targetObject.IsValid())
			return false;

		if (!_targetObject.Components.TryGet<Interactions>( out var interactions ))
			return false;

		var interactionsAvailable = interactions.AllInteractions.Any( i => WithinBounds(i) && WithinRange(i) );
		if (!interactionsAvailable && interactions.HideOnEmpty)
			return false;

		return interactionsAvailable;
	}

	private bool IsAccessible(Interaction interaction)
	{
		
		if (interaction.Accessibility.HasFlag(AccessibleFrom.World))
			return true;

		return false;
	}

	private bool WithinRange(Interaction interaction)
	{
        return PlayerObject.Local.ViewRay.Position.Distance(_targetObject.Transform.Position) < interaction.InteractDistance;
    }

	protected override int BuildHash()
	{
		return HashCode.Combine
		(
			DisplayName, 
			_targetObject.IsValid(),
			_interactions.HashCombine(i => HashCode.Combine(i.Text, i.Disabled.InvokeOrDefault(), (bool)i.CooldownTimer, TimerIndex(i), WithinBounds(i), HasPriority(i.Keybind)))
		);
	}
}
